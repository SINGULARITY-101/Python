023 DICTIONARIES IN PYTHON



*Dictionaries stores objects in an unordered way (unlike lists which stores objects in an ordered fashion)

*However Dictionaries allows us to use key-value pairing instead

*This key-value pair allows users to quickly grab objexts without needing to know an index location







*Dictionaires use curly braces:

{'key1':'value1','key2':'value2'}



my_dict={"key1":"value1","key2":"value2"}

my_dict["key1"]       -value1







*Dicationaries can also be created using the dict function :


person2=dict(name="Vishesh",age=20)

person2



OUTPUT: {'name':'Vishesh','age':20}













*Dictionaries- Use when you want to retrieve objects by name (key)
	       However one drawback is it is unordered and it cannot be sorted
  
        Lists- Use when you want to retieve objects by location
	       Ordered sequence can be indexed or sliced




*Dictionaries are super flexible in the data types they can hold. Like they can include lists or other dictonaries


d={"k1":123,"k2":[1,2,3],"k3":{"insidekey":100}}

d["k2"]                    - [1,2,3]
d["k3"]["insidekey"]       - 100
d["k2"][1]                 - 2













ADDING NEW KEY-VALUE PAIRS TO DICTIONARIES
 
 d={"k1":100,"k2":200}
 
 d["k3"]=300






OVERWRTING AN EXISTING KEY-VALUE PAIR

 d["k1"]="NEW VALUE"





REMOVING A KEY-VALUE PAIR



 person1.pop("key1")












GET() METHOD

*Used to get a value associated with a key while avoiding getting key error in case the key is not present

The get() method also accepts a default value which is returned if the key is not present in the dictionary 



 person.get("key1","Default")










USEFUL METHODS

 d.keys()               - Shows the Keys
 d.items()              - Shows the key-value pairs
 d.values()             - Shows the values

 a=d.copy()		- Returns a copy of the dictionary 

 d1.update(d2)          -Updates the dictionary with the elements from another dictionary or
                         from an iterable (genrally tuples) of key-value pairs 

                         If update is called without passing any parameters the dictionary                            remains unchanged 
 
                         







NOTE: The result of the keys(),values() or items() looks like lists but do not support             indexing operator for retreiving elements

      In order to support indexing, you will have to cast the result into a list like this



      list(d.keys())                -['key1','key2']
      
      list(d.keys())[0]             - 'key1    


















